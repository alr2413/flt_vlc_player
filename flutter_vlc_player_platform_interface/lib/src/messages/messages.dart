// Autogenerated from Pigeon (v0.1.12), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import
// @dart = 2.8
import 'dart:async';
import 'package:flutter/services.dart';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

class CreateMessage {
  int textureId;
  String uri;
  int type;
  String packageName;
  bool autoPlay;
  int hwAcc;
  List options;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['uri'] = uri;
    pigeonMap['type'] = type;
    pigeonMap['packageName'] = packageName;
    pigeonMap['autoPlay'] = autoPlay;
    pigeonMap['hwAcc'] = hwAcc;
    pigeonMap['options'] = options;
    return pigeonMap;
  }
  // ignore: unused_element
  static CreateMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final CreateMessage result = CreateMessage();
    result.textureId = pigeonMap['textureId'];
    result.uri = pigeonMap['uri'];
    result.type = pigeonMap['type'];
    result.packageName = pigeonMap['packageName'];
    result.autoPlay = pigeonMap['autoPlay'];
    result.hwAcc = pigeonMap['hwAcc'];
    result.options = pigeonMap['options'];
    return result;
  }
}

class TextureMessage {
  int textureId;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['textureId'] = textureId;
    return pigeonMap;
  }
  // ignore: unused_element
  static TextureMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final TextureMessage result = TextureMessage();
    result.textureId = pigeonMap['textureId'];
    return result;
  }
}

class SetMediaMessage {
  int textureId;
  String uri;
  int type;
  String packageName;
  bool autoPlay;
  int hwAcc;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['uri'] = uri;
    pigeonMap['type'] = type;
    pigeonMap['packageName'] = packageName;
    pigeonMap['autoPlay'] = autoPlay;
    pigeonMap['hwAcc'] = hwAcc;
    return pigeonMap;
  }
  // ignore: unused_element
  static SetMediaMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final SetMediaMessage result = SetMediaMessage();
    result.textureId = pigeonMap['textureId'];
    result.uri = pigeonMap['uri'];
    result.type = pigeonMap['type'];
    result.packageName = pigeonMap['packageName'];
    result.autoPlay = pigeonMap['autoPlay'];
    result.hwAcc = pigeonMap['hwAcc'];
    return result;
  }
}

class BooleanMessage {
  int textureId;
  bool result;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['result'] = result;
    return pigeonMap;
  }
  // ignore: unused_element
  static BooleanMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final BooleanMessage result = BooleanMessage();
    result.textureId = pigeonMap['textureId'];
    result.result = pigeonMap['result'];
    return result;
  }
}

class LoopingMessage {
  int textureId;
  bool isLooping;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['isLooping'] = isLooping;
    return pigeonMap;
  }
  // ignore: unused_element
  static LoopingMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final LoopingMessage result = LoopingMessage();
    result.textureId = pigeonMap['textureId'];
    result.isLooping = pigeonMap['isLooping'];
    return result;
  }
}

class PositionMessage {
  int textureId;
  int position;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['position'] = position;
    return pigeonMap;
  }
  // ignore: unused_element
  static PositionMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final PositionMessage result = PositionMessage();
    result.textureId = pigeonMap['textureId'];
    result.position = pigeonMap['position'];
    return result;
  }
}

class DurationMessage {
  int textureId;
  int duration;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['duration'] = duration;
    return pigeonMap;
  }
  // ignore: unused_element
  static DurationMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final DurationMessage result = DurationMessage();
    result.textureId = pigeonMap['textureId'];
    result.duration = pigeonMap['duration'];
    return result;
  }
}

class VolumeMessage {
  int textureId;
  int volume;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['volume'] = volume;
    return pigeonMap;
  }
  // ignore: unused_element
  static VolumeMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final VolumeMessage result = VolumeMessage();
    result.textureId = pigeonMap['textureId'];
    result.volume = pigeonMap['volume'];
    return result;
  }
}

class PlaybackSpeedMessage {
  int textureId;
  double speed;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['speed'] = speed;
    return pigeonMap;
  }
  // ignore: unused_element
  static PlaybackSpeedMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final PlaybackSpeedMessage result = PlaybackSpeedMessage();
    result.textureId = pigeonMap['textureId'];
    result.speed = pigeonMap['speed'];
    return result;
  }
}

class SnapshotMessage {
  int textureId;
  String snapshot;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['snapshot'] = snapshot;
    return pigeonMap;
  }
  // ignore: unused_element
  static SnapshotMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final SnapshotMessage result = SnapshotMessage();
    result.textureId = pigeonMap['textureId'];
    result.snapshot = pigeonMap['snapshot'];
    return result;
  }
}

class TrackCountMessage {
  int textureId;
  int count;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['count'] = count;
    return pigeonMap;
  }
  // ignore: unused_element
  static TrackCountMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final TrackCountMessage result = TrackCountMessage();
    result.textureId = pigeonMap['textureId'];
    result.count = pigeonMap['count'];
    return result;
  }
}

class SpuTracksMessage {
  int textureId;
  Map subtitles;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['subtitles'] = subtitles;
    return pigeonMap;
  }
  // ignore: unused_element
  static SpuTracksMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final SpuTracksMessage result = SpuTracksMessage();
    result.textureId = pigeonMap['textureId'];
    result.subtitles = pigeonMap['subtitles'];
    return result;
  }
}

class SpuTrackMessage {
  int textureId;
  int spuTrackNumber;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['spuTrackNumber'] = spuTrackNumber;
    return pigeonMap;
  }
  // ignore: unused_element
  static SpuTrackMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final SpuTrackMessage result = SpuTrackMessage();
    result.textureId = pigeonMap['textureId'];
    result.spuTrackNumber = pigeonMap['spuTrackNumber'];
    return result;
  }
}

class DelayMessage {
  int textureId;
  int delay;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['delay'] = delay;
    return pigeonMap;
  }
  // ignore: unused_element
  static DelayMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final DelayMessage result = DelayMessage();
    result.textureId = pigeonMap['textureId'];
    result.delay = pigeonMap['delay'];
    return result;
  }
}

class AddSubtitleMessage {
  int textureId;
  String uri;
  bool isLocal;
  bool isSelected;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['uri'] = uri;
    pigeonMap['isLocal'] = isLocal;
    pigeonMap['isSelected'] = isSelected;
    return pigeonMap;
  }
  // ignore: unused_element
  static AddSubtitleMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final AddSubtitleMessage result = AddSubtitleMessage();
    result.textureId = pigeonMap['textureId'];
    result.uri = pigeonMap['uri'];
    result.isLocal = pigeonMap['isLocal'];
    result.isSelected = pigeonMap['isSelected'];
    return result;
  }
}

class AudioTracksMessage {
  int textureId;
  Map audios;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['audios'] = audios;
    return pigeonMap;
  }
  // ignore: unused_element
  static AudioTracksMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final AudioTracksMessage result = AudioTracksMessage();
    result.textureId = pigeonMap['textureId'];
    result.audios = pigeonMap['audios'];
    return result;
  }
}

class AudioTrackMessage {
  int textureId;
  int audioTrackNumber;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['audioTrackNumber'] = audioTrackNumber;
    return pigeonMap;
  }
  // ignore: unused_element
  static AudioTrackMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final AudioTrackMessage result = AudioTrackMessage();
    result.textureId = pigeonMap['textureId'];
    result.audioTrackNumber = pigeonMap['audioTrackNumber'];
    return result;
  }
}

class VideoTracksMessage {
  int textureId;
  Map videos;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['videos'] = videos;
    return pigeonMap;
  }
  // ignore: unused_element
  static VideoTracksMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final VideoTracksMessage result = VideoTracksMessage();
    result.textureId = pigeonMap['textureId'];
    result.videos = pigeonMap['videos'];
    return result;
  }
}

class VideoTrackMessage {
  int textureId;
  int videoTrackNumber;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['videoTrackNumber'] = videoTrackNumber;
    return pigeonMap;
  }
  // ignore: unused_element
  static VideoTrackMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final VideoTrackMessage result = VideoTrackMessage();
    result.textureId = pigeonMap['textureId'];
    result.videoTrackNumber = pigeonMap['videoTrackNumber'];
    return result;
  }
}

class VideoScaleMessage {
  int textureId;
  double scale;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['scale'] = scale;
    return pigeonMap;
  }
  // ignore: unused_element
  static VideoScaleMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final VideoScaleMessage result = VideoScaleMessage();
    result.textureId = pigeonMap['textureId'];
    result.scale = pigeonMap['scale'];
    return result;
  }
}

class VideoAspectRatioMessage {
  int textureId;
  String aspectRatio;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['aspectRatio'] = aspectRatio;
    return pigeonMap;
  }
  // ignore: unused_element
  static VideoAspectRatioMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final VideoAspectRatioMessage result = VideoAspectRatioMessage();
    result.textureId = pigeonMap['textureId'];
    result.aspectRatio = pigeonMap['aspectRatio'];
    return result;
  }
}

class RendererServicesMessage {
  int textureId;
  List services;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['services'] = services;
    return pigeonMap;
  }
  // ignore: unused_element
  static RendererServicesMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final RendererServicesMessage result = RendererServicesMessage();
    result.textureId = pigeonMap['textureId'];
    result.services = pigeonMap['services'];
    return result;
  }
}

class RendererScanningMessage {
  int textureId;
  String rendererService;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['rendererService'] = rendererService;
    return pigeonMap;
  }
  // ignore: unused_element
  static RendererScanningMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final RendererScanningMessage result = RendererScanningMessage();
    result.textureId = pigeonMap['textureId'];
    result.rendererService = pigeonMap['rendererService'];
    return result;
  }
}

class RendererDevicesMessage {
  int textureId;
  Map rendererDevices;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['rendererDevices'] = rendererDevices;
    return pigeonMap;
  }
  // ignore: unused_element
  static RendererDevicesMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final RendererDevicesMessage result = RendererDevicesMessage();
    result.textureId = pigeonMap['textureId'];
    result.rendererDevices = pigeonMap['rendererDevices'];
    return result;
  }
}

class RenderDeviceMessage {
  int textureId;
  String rendererDevice;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['textureId'] = textureId;
    pigeonMap['rendererDevice'] = rendererDevice;
    return pigeonMap;
  }
  // ignore: unused_element
  static RenderDeviceMessage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final RenderDeviceMessage result = RenderDeviceMessage();
    result.textureId = pigeonMap['textureId'];
    result.rendererDevice = pigeonMap['rendererDevice'];
    return result;
  }
}

class VlcPlayerApi {
  Future<void> initialize() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.initialize', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<void> create(CreateMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.create', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<void> dispose(TextureMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.dispose', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<void> setStreamUrl(SetMediaMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.setStreamUrl', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<void> play(TextureMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.play', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<void> pause(TextureMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.pause', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<void> stop(TextureMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.stop', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<BooleanMessage> isPlaying(TextureMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.isPlaying', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return BooleanMessage._fromMap(replyMap['result']);
    }
    
  }
  Future<void> setLooping(LoopingMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.setLooping', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<void> seekTo(PositionMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.seekTo', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<PositionMessage> position(TextureMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.position', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return PositionMessage._fromMap(replyMap['result']);
    }
    
  }
  Future<DurationMessage> duration(TextureMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.duration', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return DurationMessage._fromMap(replyMap['result']);
    }
    
  }
  Future<void> setVolume(VolumeMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.setVolume', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<VolumeMessage> getVolume(TextureMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getVolume', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return VolumeMessage._fromMap(replyMap['result']);
    }
    
  }
  Future<void> setPlaybackSpeed(PlaybackSpeedMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.setPlaybackSpeed', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<PlaybackSpeedMessage> getPlaybackSpeed(TextureMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getPlaybackSpeed', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return PlaybackSpeedMessage._fromMap(replyMap['result']);
    }
    
  }
  Future<SnapshotMessage> takeSnapshot(TextureMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.takeSnapshot', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return SnapshotMessage._fromMap(replyMap['result']);
    }
    
  }
  Future<TrackCountMessage> getSpuTracksCount(TextureMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getSpuTracksCount', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return TrackCountMessage._fromMap(replyMap['result']);
    }
    
  }
  Future<SpuTracksMessage> getSpuTracks(TextureMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getSpuTracks', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return SpuTracksMessage._fromMap(replyMap['result']);
    }
    
  }
  Future<void> setSpuTrack(SpuTrackMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.setSpuTrack', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<SpuTrackMessage> getSpuTrack(TextureMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getSpuTrack', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return SpuTrackMessage._fromMap(replyMap['result']);
    }
    
  }
  Future<void> setSpuDelay(DelayMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.setSpuDelay', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<DelayMessage> getSpuDelay(TextureMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getSpuDelay', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return DelayMessage._fromMap(replyMap['result']);
    }
    
  }
  Future<void> addSubtitleTrack(AddSubtitleMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.addSubtitleTrack', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<TrackCountMessage> getAudioTracksCount(TextureMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getAudioTracksCount', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return TrackCountMessage._fromMap(replyMap['result']);
    }
    
  }
  Future<AudioTracksMessage> getAudioTracks(TextureMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getAudioTracks', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return AudioTracksMessage._fromMap(replyMap['result']);
    }
    
  }
  Future<void> setAudioTrack(AudioTrackMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.setAudioTrack', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<AudioTrackMessage> getAudioTrack(TextureMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getAudioTrack', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return AudioTrackMessage._fromMap(replyMap['result']);
    }
    
  }
  Future<void> setAudioDelay(DelayMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.setAudioDelay', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<DelayMessage> getAudioDelay(TextureMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getAudioDelay', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return DelayMessage._fromMap(replyMap['result']);
    }
    
  }
  Future<TrackCountMessage> getVideoTracksCount(TextureMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getVideoTracksCount', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return TrackCountMessage._fromMap(replyMap['result']);
    }
    
  }
  Future<VideoTracksMessage> getVideoTracks(TextureMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getVideoTracks', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return VideoTracksMessage._fromMap(replyMap['result']);
    }
    
  }
  Future<void> setVideoTrack(VideoTrackMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.setVideoTrack', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<VideoTrackMessage> getVideoTrack(TextureMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getVideoTrack', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return VideoTrackMessage._fromMap(replyMap['result']);
    }
    
  }
  Future<void> setVideoScale(VideoScaleMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.setVideoScale', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<VideoScaleMessage> getVideoScale(TextureMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getVideoScale', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return VideoScaleMessage._fromMap(replyMap['result']);
    }
    
  }
  Future<void> setVideoAspectRatio(VideoAspectRatioMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.setVideoAspectRatio', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<VideoAspectRatioMessage> getVideoAspectRatio(TextureMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getVideoAspectRatio', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return VideoAspectRatioMessage._fromMap(replyMap['result']);
    }
    
  }
  Future<RendererServicesMessage> getAvailableRendererServices(TextureMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getAvailableRendererServices', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return RendererServicesMessage._fromMap(replyMap['result']);
    }
    
  }
  Future<void> startRendererScanning(RendererScanningMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.startRendererScanning', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<void> stopRendererScanning(TextureMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.stopRendererScanning', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
  Future<RendererDevicesMessage> getRendererDevices(TextureMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getRendererDevices', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return RendererDevicesMessage._fromMap(replyMap['result']);
    }
    
  }
  Future<void> castToRenderer(RenderDeviceMessage arg) async {
    final Map<dynamic, dynamic> requestMap = arg._toMap();
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.castToRenderer', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(requestMap);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      // noop
    }
    
  }
}

abstract class TestHostVlcPlayerApi {
  void initialize();
  void create(CreateMessage arg);
  void dispose(TextureMessage arg);
  void setStreamUrl(SetMediaMessage arg);
  void play(TextureMessage arg);
  void pause(TextureMessage arg);
  void stop(TextureMessage arg);
  BooleanMessage isPlaying(TextureMessage arg);
  void setLooping(LoopingMessage arg);
  void seekTo(PositionMessage arg);
  PositionMessage position(TextureMessage arg);
  DurationMessage duration(TextureMessage arg);
  void setVolume(VolumeMessage arg);
  VolumeMessage getVolume(TextureMessage arg);
  void setPlaybackSpeed(PlaybackSpeedMessage arg);
  PlaybackSpeedMessage getPlaybackSpeed(TextureMessage arg);
  SnapshotMessage takeSnapshot(TextureMessage arg);
  TrackCountMessage getSpuTracksCount(TextureMessage arg);
  SpuTracksMessage getSpuTracks(TextureMessage arg);
  void setSpuTrack(SpuTrackMessage arg);
  SpuTrackMessage getSpuTrack(TextureMessage arg);
  void setSpuDelay(DelayMessage arg);
  DelayMessage getSpuDelay(TextureMessage arg);
  void addSubtitleTrack(AddSubtitleMessage arg);
  TrackCountMessage getAudioTracksCount(TextureMessage arg);
  AudioTracksMessage getAudioTracks(TextureMessage arg);
  void setAudioTrack(AudioTrackMessage arg);
  AudioTrackMessage getAudioTrack(TextureMessage arg);
  void setAudioDelay(DelayMessage arg);
  DelayMessage getAudioDelay(TextureMessage arg);
  TrackCountMessage getVideoTracksCount(TextureMessage arg);
  VideoTracksMessage getVideoTracks(TextureMessage arg);
  void setVideoTrack(VideoTrackMessage arg);
  VideoTrackMessage getVideoTrack(TextureMessage arg);
  void setVideoScale(VideoScaleMessage arg);
  VideoScaleMessage getVideoScale(TextureMessage arg);
  void setVideoAspectRatio(VideoAspectRatioMessage arg);
  VideoAspectRatioMessage getVideoAspectRatio(TextureMessage arg);
  RendererServicesMessage getAvailableRendererServices(TextureMessage arg);
  void startRendererScanning(RendererScanningMessage arg);
  void stopRendererScanning(TextureMessage arg);
  RendererDevicesMessage getRendererDevices(TextureMessage arg);
  void castToRenderer(RenderDeviceMessage arg);
  static void setup(TestHostVlcPlayerApi api) {
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.initialize', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          api.initialize();
          return <dynamic, dynamic>{};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.create', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final CreateMessage input = CreateMessage._fromMap(mapMessage);
          api.create(input);
          return <dynamic, dynamic>{};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.dispose', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TextureMessage input = TextureMessage._fromMap(mapMessage);
          api.dispose(input);
          return <dynamic, dynamic>{};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.setStreamUrl', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final SetMediaMessage input = SetMediaMessage._fromMap(mapMessage);
          api.setStreamUrl(input);
          return <dynamic, dynamic>{};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.play', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TextureMessage input = TextureMessage._fromMap(mapMessage);
          api.play(input);
          return <dynamic, dynamic>{};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.pause', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TextureMessage input = TextureMessage._fromMap(mapMessage);
          api.pause(input);
          return <dynamic, dynamic>{};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.stop', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TextureMessage input = TextureMessage._fromMap(mapMessage);
          api.stop(input);
          return <dynamic, dynamic>{};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.isPlaying', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TextureMessage input = TextureMessage._fromMap(mapMessage);
          final BooleanMessage output = api.isPlaying(input);
          return <dynamic, dynamic>{'result': output._toMap()};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.setLooping', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final LoopingMessage input = LoopingMessage._fromMap(mapMessage);
          api.setLooping(input);
          return <dynamic, dynamic>{};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.seekTo', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final PositionMessage input = PositionMessage._fromMap(mapMessage);
          api.seekTo(input);
          return <dynamic, dynamic>{};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.position', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TextureMessage input = TextureMessage._fromMap(mapMessage);
          final PositionMessage output = api.position(input);
          return <dynamic, dynamic>{'result': output._toMap()};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.duration', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TextureMessage input = TextureMessage._fromMap(mapMessage);
          final DurationMessage output = api.duration(input);
          return <dynamic, dynamic>{'result': output._toMap()};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.setVolume', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final VolumeMessage input = VolumeMessage._fromMap(mapMessage);
          api.setVolume(input);
          return <dynamic, dynamic>{};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getVolume', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TextureMessage input = TextureMessage._fromMap(mapMessage);
          final VolumeMessage output = api.getVolume(input);
          return <dynamic, dynamic>{'result': output._toMap()};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.setPlaybackSpeed', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final PlaybackSpeedMessage input = PlaybackSpeedMessage._fromMap(mapMessage);
          api.setPlaybackSpeed(input);
          return <dynamic, dynamic>{};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getPlaybackSpeed', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TextureMessage input = TextureMessage._fromMap(mapMessage);
          final PlaybackSpeedMessage output = api.getPlaybackSpeed(input);
          return <dynamic, dynamic>{'result': output._toMap()};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.takeSnapshot', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TextureMessage input = TextureMessage._fromMap(mapMessage);
          final SnapshotMessage output = api.takeSnapshot(input);
          return <dynamic, dynamic>{'result': output._toMap()};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getSpuTracksCount', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TextureMessage input = TextureMessage._fromMap(mapMessage);
          final TrackCountMessage output = api.getSpuTracksCount(input);
          return <dynamic, dynamic>{'result': output._toMap()};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getSpuTracks', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TextureMessage input = TextureMessage._fromMap(mapMessage);
          final SpuTracksMessage output = api.getSpuTracks(input);
          return <dynamic, dynamic>{'result': output._toMap()};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.setSpuTrack', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final SpuTrackMessage input = SpuTrackMessage._fromMap(mapMessage);
          api.setSpuTrack(input);
          return <dynamic, dynamic>{};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getSpuTrack', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TextureMessage input = TextureMessage._fromMap(mapMessage);
          final SpuTrackMessage output = api.getSpuTrack(input);
          return <dynamic, dynamic>{'result': output._toMap()};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.setSpuDelay', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final DelayMessage input = DelayMessage._fromMap(mapMessage);
          api.setSpuDelay(input);
          return <dynamic, dynamic>{};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getSpuDelay', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TextureMessage input = TextureMessage._fromMap(mapMessage);
          final DelayMessage output = api.getSpuDelay(input);
          return <dynamic, dynamic>{'result': output._toMap()};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.addSubtitleTrack', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final AddSubtitleMessage input = AddSubtitleMessage._fromMap(mapMessage);
          api.addSubtitleTrack(input);
          return <dynamic, dynamic>{};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getAudioTracksCount', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TextureMessage input = TextureMessage._fromMap(mapMessage);
          final TrackCountMessage output = api.getAudioTracksCount(input);
          return <dynamic, dynamic>{'result': output._toMap()};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getAudioTracks', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TextureMessage input = TextureMessage._fromMap(mapMessage);
          final AudioTracksMessage output = api.getAudioTracks(input);
          return <dynamic, dynamic>{'result': output._toMap()};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.setAudioTrack', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final AudioTrackMessage input = AudioTrackMessage._fromMap(mapMessage);
          api.setAudioTrack(input);
          return <dynamic, dynamic>{};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getAudioTrack', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TextureMessage input = TextureMessage._fromMap(mapMessage);
          final AudioTrackMessage output = api.getAudioTrack(input);
          return <dynamic, dynamic>{'result': output._toMap()};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.setAudioDelay', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final DelayMessage input = DelayMessage._fromMap(mapMessage);
          api.setAudioDelay(input);
          return <dynamic, dynamic>{};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getAudioDelay', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TextureMessage input = TextureMessage._fromMap(mapMessage);
          final DelayMessage output = api.getAudioDelay(input);
          return <dynamic, dynamic>{'result': output._toMap()};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getVideoTracksCount', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TextureMessage input = TextureMessage._fromMap(mapMessage);
          final TrackCountMessage output = api.getVideoTracksCount(input);
          return <dynamic, dynamic>{'result': output._toMap()};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getVideoTracks', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TextureMessage input = TextureMessage._fromMap(mapMessage);
          final VideoTracksMessage output = api.getVideoTracks(input);
          return <dynamic, dynamic>{'result': output._toMap()};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.setVideoTrack', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final VideoTrackMessage input = VideoTrackMessage._fromMap(mapMessage);
          api.setVideoTrack(input);
          return <dynamic, dynamic>{};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getVideoTrack', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TextureMessage input = TextureMessage._fromMap(mapMessage);
          final VideoTrackMessage output = api.getVideoTrack(input);
          return <dynamic, dynamic>{'result': output._toMap()};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.setVideoScale', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final VideoScaleMessage input = VideoScaleMessage._fromMap(mapMessage);
          api.setVideoScale(input);
          return <dynamic, dynamic>{};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getVideoScale', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TextureMessage input = TextureMessage._fromMap(mapMessage);
          final VideoScaleMessage output = api.getVideoScale(input);
          return <dynamic, dynamic>{'result': output._toMap()};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.setVideoAspectRatio', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final VideoAspectRatioMessage input = VideoAspectRatioMessage._fromMap(mapMessage);
          api.setVideoAspectRatio(input);
          return <dynamic, dynamic>{};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getVideoAspectRatio', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TextureMessage input = TextureMessage._fromMap(mapMessage);
          final VideoAspectRatioMessage output = api.getVideoAspectRatio(input);
          return <dynamic, dynamic>{'result': output._toMap()};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getAvailableRendererServices', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TextureMessage input = TextureMessage._fromMap(mapMessage);
          final RendererServicesMessage output = api.getAvailableRendererServices(input);
          return <dynamic, dynamic>{'result': output._toMap()};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.startRendererScanning', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final RendererScanningMessage input = RendererScanningMessage._fromMap(mapMessage);
          api.startRendererScanning(input);
          return <dynamic, dynamic>{};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.stopRendererScanning', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TextureMessage input = TextureMessage._fromMap(mapMessage);
          api.stopRendererScanning(input);
          return <dynamic, dynamic>{};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.getRendererDevices', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final TextureMessage input = TextureMessage._fromMap(mapMessage);
          final RendererDevicesMessage output = api.getRendererDevices(input);
          return <dynamic, dynamic>{'result': output._toMap()};
        });
      }
    }
    {
      const BasicMessageChannel<dynamic> channel =
          BasicMessageChannel<dynamic>('dev.flutter.pigeon.VlcPlayerApi.castToRenderer', StandardMessageCodec());
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {

        channel.setMockMessageHandler((dynamic message) async {
          final Map<dynamic, dynamic> mapMessage = message as Map<dynamic, dynamic>;
          final RenderDeviceMessage input = RenderDeviceMessage._fromMap(mapMessage);
          api.castToRenderer(input);
          return <dynamic, dynamic>{};
        });
      }
    }
  }
}

